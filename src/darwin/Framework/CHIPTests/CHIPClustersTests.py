# -*- coding: utf-8 -*-
'''
/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
'''

import PyChip
import os
import objc
from Foundation import NSObject
from PyDispatch import dispatch_queue_create
from threading import Event

GLOBAL_EVENT = Event()
CHIPErrorCodeUnsupportedAttribute = 10

def waitForEvent(timeout=5):
    GLOBAL_EVENT.wait(5)
    GLOBAL_EVENT.clear()

os.environ["XCTestConfigurationFilePath"] = "/blah/"

kPairingTimeoutInSeconds = 10
kTimeoutInSeconds = 3
kDeviceId = 1
kDiscriminator = 3840
kSetupPINCode = 20202021
kRemotePort = 5540
kLocalPort = 5541
kAddress = "::1"


class TestException(Exception):
    pass


def GetPairedDevice(deviceId):
    controller = PyChip.CHIPDeviceController.sharedController()
    if not controller:
        raise TestException("Controller did not instantiate")

    device = controller.getPairedDevice_error_(deviceId, None)
    if isinstance(device, tuple) or not device:
        raise TestException("Unable to obtain device")

    return device


class CHIPDevicePairingDelegate(NSObject):
    def onStatusUpdate_(self, status):
        print(status)

    def onPairingComplete_(self, error):
        print("Pairing complete")
        GLOBAL_EVENT.set()
        print(error)

    def onPairingDeleted_(self, error):
        print(error)

    def onAddressUpdated_(self, error):
        print(error)


class CHIPClustersTests(object):
    def __init__(self, device_id, ip_addr, local_port, remote_port, discriminator, setup_code):
        self.device_id = device_id
        self.ip_address = ip_addr
        self.local_port = local_port
        self.remote_port = remote_port
        self.discriminator = discriminator
        self.setup_code = setup_code
        self.controller = PyChip.CHIPDeviceController.sharedController()

    def setup(self):
        pass

    def testInitStack(self):
        controller = PyChip.CHIPDeviceController.sharedController()
        if not controller:
            raise TestException("Controller did not instantiate")

        pairDelegate = CHIPDevicePairingDelegate.alloc().init()
        testDispatchQ = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=testDispatchQ)

        controller.setListenPort_(kLocalPort)
        controller.setPairingDelegate_queue_(pairDelegate, call_back_q)

        started = controller.startup_vendorId_nocSigner_(None, 0, None)
        if not started:
            raise TestException("Controller was not started.")

        controller.pairDevice_address_port_discriminator_setupPINCode_error_(self.device_id, self.ip_address, self.remote_port, self.discriminator, self.setup_code, None)
        waitForEvent()

    def testShutdownStack(self):
        controller = PyChip.CHIPDeviceController.sharedController()
        if not controller:
            raise TestException("Controller did not instantiate")

        error = controller.unpairDevice_error_(kDeviceId, None)
        if error:
            raise TestException("Unable to unpair device")

        stopped = controller.shutdown()
        if not stopped:
            raise TestException("Unable to shutdown controller.")

    def testReuseChipClusterObject(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to instantiate cluster")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()
        
        clust.test_(response_callback)
        waitForEvent()

        clust.test_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTestCluster_Reporting_0000_BindOnOff_Test(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)
        binding_cluster = CHIPBinding.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not binding_cluster:
            raise TestException("Unable to create binding cluster")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        binding_cluster.bind_groupId_endpointId_clusterId_responseHandler_(kDeviceId, 0, 1, 6, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTestCluster_Reporting_0001_ConfigureOnOff_Test(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)
        on_off_cluster = CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not on_off_cluster:
            raise TestException("Unable to create binding cluster")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        on_off_cluster.configureAttributeOnOffWithMinInterval_maxInterval_responseHandler_(0,1, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    
    def testSendClusterTestCluster_Reporting_0002_ReportOnOff_Test(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        on_off_cluster = CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not on_off_cluster:
            raise TestException("Unable to create binding cluster")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        on_off_cluster.reportAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTestCluster_Reporting_0003_StopReportOnOff_Test(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        on_off_cluster = CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not on_off_cluster:
            raise TestException("Unable to create binding cluster")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        on_off_cluster.configureAttributeOnOffWithMinInterval_maxInterval_responseHandler_(0,0xFFFF, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")


    def testSendClusterTestCluster_000000_Test(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.test_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000001_TestNotHandled(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 1) == 1
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.testNotHandled_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000002_TestSpecific(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["returnValue"] == 7
            result['error_str'] = "Expected value 7 does not match actual value {}".format(values["returnValue"] )
            GLOBAL_EVENT.set()


        cluster.testSpecific_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000003_TestAddArguments(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["returnValue"] == 20
            result['error_str'] = "Expected value 20 does not match actual value {}".format(values["returnValue"] )
            GLOBAL_EVENT.set()

        arg1Argument = 3
        arg2Argument = 17

        cluster.testAddArguments_arg2_responseHandler_(arg1Argument, arg2Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000004_TestAddArguments(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 1) == 1
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        arg1Argument = 250
        arg2Argument = 6

        cluster.testAddArguments_arg2_responseHandler_(arg1Argument, arg2Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000005_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBooleanWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000006_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        booleanArgument = 1

        cluster.writeAttributeBooleanWithValue_responseHandler_(booleanArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000007_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBooleanWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000008_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        booleanArgument = 0

        cluster.writeAttributeBooleanWithValue_responseHandler_(booleanArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000009_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBooleanWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000010_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap8WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000011_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        bitmap8Argument = 255

        cluster.writeAttributeBitmap8WithValue_responseHandler_(bitmap8Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000012_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 255
            result['error_str'] = "Expected value 255 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap8WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000013_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        bitmap8Argument = 0

        cluster.writeAttributeBitmap8WithValue_responseHandler_(bitmap8Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000014_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap8WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000015_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap16WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000016_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        bitmap16Argument = 65535

        cluster.writeAttributeBitmap16WithValue_responseHandler_(bitmap16Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000017_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 65535
            result['error_str'] = "Expected value 65535 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap16WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000018_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        bitmap16Argument = 0

        cluster.writeAttributeBitmap16WithValue_responseHandler_(bitmap16Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000019_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap16WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000020_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap32WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000021_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        bitmap32Argument = 4294967295

        cluster.writeAttributeBitmap32WithValue_responseHandler_(bitmap32Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000022_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 4294967295
            result['error_str'] = "Expected value 4294967295 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap32WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000023_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        bitmap32Argument = 0

        cluster.writeAttributeBitmap32WithValue_responseHandler_(bitmap32Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000024_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap32WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000025_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap64WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000026_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        bitmap64Argument = 18446744073709551615

        cluster.writeAttributeBitmap64WithValue_responseHandler_(bitmap64Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000027_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 18446744073709551615
            result['error_str'] = "Expected value 18446744073709551615 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap64WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000028_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        bitmap64Argument = 0

        cluster.writeAttributeBitmap64WithValue_responseHandler_(bitmap64Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000029_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeBitmap64WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000030_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt8uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000031_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int8uArgument = 255

        cluster.writeAttributeInt8uWithValue_responseHandler_(int8uArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000032_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 255
            result['error_str'] = "Expected value 255 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt8uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000033_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int8uArgument = 0

        cluster.writeAttributeInt8uWithValue_responseHandler_(int8uArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000034_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt8uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000035_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt16uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000036_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int16uArgument = 65535

        cluster.writeAttributeInt16uWithValue_responseHandler_(int16uArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000037_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 65535
            result['error_str'] = "Expected value 65535 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt16uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000038_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int16uArgument = 0

        cluster.writeAttributeInt16uWithValue_responseHandler_(int16uArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000039_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt16uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000040_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt32uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000041_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int32uArgument = 4294967295

        cluster.writeAttributeInt32uWithValue_responseHandler_(int32uArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000042_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 4294967295
            result['error_str'] = "Expected value 4294967295 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt32uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000043_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int32uArgument = 0

        cluster.writeAttributeInt32uWithValue_responseHandler_(int32uArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000044_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt32uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000045_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt64uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000046_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int64uArgument = 18446744073709551615

        cluster.writeAttributeInt64uWithValue_responseHandler_(int64uArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000047_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 18446744073709551615
            result['error_str'] = "Expected value 18446744073709551615 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt64uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000048_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int64uArgument = 0

        cluster.writeAttributeInt64uWithValue_responseHandler_(int64uArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000049_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt64uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000050_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt8sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000051_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int8sArgument = 127

        cluster.writeAttributeInt8sWithValue_responseHandler_(int8sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000052_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 127
            result['error_str'] = "Expected value 127 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt8sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000053_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int8sArgument = -128

        cluster.writeAttributeInt8sWithValue_responseHandler_(int8sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000054_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == -128
            result['error_str'] = "Expected value -128 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt8sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000055_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int8sArgument = 0

        cluster.writeAttributeInt8sWithValue_responseHandler_(int8sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000056_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt8sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000057_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt16sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000058_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int16sArgument = 32767

        cluster.writeAttributeInt16sWithValue_responseHandler_(int16sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000059_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 32767
            result['error_str'] = "Expected value 32767 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt16sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000060_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int16sArgument = -32768

        cluster.writeAttributeInt16sWithValue_responseHandler_(int16sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000061_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == -32768
            result['error_str'] = "Expected value -32768 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt16sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000062_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int16sArgument = 0

        cluster.writeAttributeInt16sWithValue_responseHandler_(int16sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000063_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt16sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000064_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt32sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000065_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int32sArgument = 2147483647

        cluster.writeAttributeInt32sWithValue_responseHandler_(int32sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000066_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 2147483647
            result['error_str'] = "Expected value 2147483647 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt32sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000067_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int32sArgument = -2147483648

        cluster.writeAttributeInt32sWithValue_responseHandler_(int32sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000068_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == -2147483648
            result['error_str'] = "Expected value -2147483648 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt32sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000069_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int32sArgument = 0

        cluster.writeAttributeInt32sWithValue_responseHandler_(int32sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000070_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt32sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000071_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt64sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000072_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int64sArgument = 9223372036854775807

        cluster.writeAttributeInt64sWithValue_responseHandler_(int64sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000073_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 9223372036854775807
            result['error_str'] = "Expected value 9223372036854775807 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt64sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000074_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int64sArgument = -9223372036854775807

        cluster.writeAttributeInt64sWithValue_responseHandler_(int64sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000075_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == -9223372036854775807
            result['error_str'] = "Expected value -9223372036854775807 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt64sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000076_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        int64sArgument = 0

        cluster.writeAttributeInt64sWithValue_responseHandler_(int64sArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000077_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeInt64sWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000078_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeEnum8WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000079_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        enum8Argument = 255

        cluster.writeAttributeEnum8WithValue_responseHandler_(enum8Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000080_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 255
            result['error_str'] = "Expected value 255 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeEnum8WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000081_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        enum8Argument = 0

        cluster.writeAttributeEnum8WithValue_responseHandler_(enum8Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000082_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeEnum8WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000083_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeEnum16WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000084_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        enum16Argument = 65535

        cluster.writeAttributeEnum16WithValue_responseHandler_(enum16Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000085_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 65535
            result['error_str'] = "Expected value 65535 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeEnum16WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000086_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        enum16Argument = 0

        cluster.writeAttributeEnum16WithValue_responseHandler_(enum16Argument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000087_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeEnum16WithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000088_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = bytes(values["value"]) == expected_value
            result['error_str'] = "Expected octect string does not match"
            GLOBAL_EVENT.set()


        cluster.readAttributeOctetStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000089_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        octetStringArgumentString= bytes.fromhex("TestValue")

        cluster.writeAttributeOctetStringWithValue_responseHandler_(octetStringArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000090_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = bytes(values["value"]) == expected_value
            result['error_str'] = "Expected octect string does not match"
            GLOBAL_EVENT.set()


        cluster.readAttributeOctetStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000091_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else true) == true
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        octetStringArgumentString= bytes.fromhex("TestValueLongerThan10")

        cluster.writeAttributeOctetStringWithValue_responseHandler_(octetStringArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000092_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = bytes(values["value"]) == expected_value
            result['error_str'] = "Expected octect string does not match"
            GLOBAL_EVENT.set()


        cluster.readAttributeOctetStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000093_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        octetStringArgumentString= bytes.fromhex("")

        cluster.writeAttributeOctetStringWithValue_responseHandler_(octetStringArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000094_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = bytes(values["value"]) == expected_value
            result['error_str'] = "Expected octect string does not match"
            GLOBAL_EVENT.set()


        cluster.readAttributeLongOctetStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000095_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        longOctetStringArgumentString= bytes.fromhex("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")

        cluster.writeAttributeLongOctetStringWithValue_responseHandler_(longOctetStringArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000096_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = bytes(values["value"]) == expected_value
            result['error_str'] = "Expected octect string does not match"
            GLOBAL_EVENT.set()


        cluster.readAttributeLongOctetStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000097_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        longOctetStringArgumentString= bytes.fromhex("")

        cluster.writeAttributeLongOctetStringWithValue_responseHandler_(longOctetStringArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000098_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == ""
            result['error_str'] = "Expected value  does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeCharStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000099_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        charStringArgument= "☉T☉"

        cluster.writeAttributeCharStringWithValue_responseHandler_(charStringArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000100_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else true) == true
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        charStringArgument= "☉TestValueLongerThan10☉"

        cluster.writeAttributeCharStringWithValue_responseHandler_(charStringArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000101_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        charStringArgument= ""

        cluster.writeAttributeCharStringWithValue_responseHandler_(charStringArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000102_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == ""
            result['error_str'] = "Expected value  does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeLongCharStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000103_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        longCharStringArgument= "☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉"

        cluster.writeAttributeLongCharStringWithValue_responseHandler_(longCharStringArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000104_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == "☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉"
            result['error_str'] = "Expected value ☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉ does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeLongCharStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000105_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        longCharStringArgument= ""

        cluster.writeAttributeLongCharStringWithValue_responseHandler_(longCharStringArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000106_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = len(values["value"]) == 4
            result['error_str'] = "List is unexpected length"
            GLOBAL_EVENT.set()


        cluster.readAttributeListInt8uWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000107_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = len(values["value"]) == 4
            result['error_str'] = "List is unexpected length"
            GLOBAL_EVENT.set()


        cluster.readAttributeListOctetStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000108_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = len(values["value"]) == 4
            result['error_str'] = "List is unexpected length"
            GLOBAL_EVENT.set()


        cluster.readAttributeListStructOctetStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000109_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = err.code == CHIPErrorCodeUnsupportedAttribute
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeUnsupportedWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000110_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = err.code == CHIPErrorCodeUnsupportedAttribute
            GLOBAL_EVENT.set()

        unsupportedArgument = 0

        cluster.writeAttributeUnsupportedWithValue_responseHandler_(unsupportedArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTestCluster_000111_Test(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTestCluster.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTestCluster")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 1) == 1
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.test_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_OO_1_1_000000_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 3
            result['error_str'] = "Expected value 3 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_1_1_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 3
            result['error_str'] = "Expected value 3 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_1_1_000002_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeFeatureMapWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_1_1_000003_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeFeatureMapWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_OO_2_1_000000_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000002_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeGlobalSceneControlWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000003_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000004_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOffWaitTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000005_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeStartUpOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000006_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        onTimeArgument = 0

        cluster.writeAttributeOnTimeWithValue_responseHandler_(onTimeArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000007_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        offWaitTimeArgument = 0

        cluster.writeAttributeOffWaitTimeWithValue_responseHandler_(offWaitTimeArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000008_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        startUpOnOffArgument = 0

        cluster.writeAttributeStartUpOnOffWithValue_responseHandler_(startUpOnOffArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000009_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000010_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOffWaitTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_1_000011_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeStartUpOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_OO_2_2_000000_Off(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.off_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000002_On(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.on_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000003_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000004_Off(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.off_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000005_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000006_Toggle(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.toggle_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000007_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000008_Toggle(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.toggle_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000009_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000010_On(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.on_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000011_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000012_Off(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.off_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OO_2_2_000013_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_DM_1_1_000000_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.readAttributeInteractionModelVersionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"].length() <= 32
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeVendorNameWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000002_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.readAttributeVendorIDWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000003_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"].length() <= 32
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeProductNameWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000004_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.readAttributeProductIDWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000005_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"].length() <= 32
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeUserLabelWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000006_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"].length() <= 2
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeLocationWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000007_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.readAttributeHardwareVersionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000008_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"].length() >= 1
            result['error_str'] = "Expected value  is not less than or equal to {}".format(values["value"] )
            result['test_passed'] = values["value"].length() <= 64
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeHardwareVersionStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000009_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.readAttributeSoftwareVersionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000010_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"].length() >= 1
            result['error_str'] = "Expected value  is not less than or equal to {}".format(values["value"] )
            result['test_passed'] = values["value"].length() <= 64
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeSoftwareVersionStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000011_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = err.code == CHIPErrorCodeUnsupportedAttribute
            result['test_passed'] = values["value"].length() >= 8
            result['error_str'] = "Expected value  is not less than or equal to {}".format(values["value"] )
            result['test_passed'] = values["value"].length() <= 16
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeManufacturingDateWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000012_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = err.code == CHIPErrorCodeUnsupportedAttribute
            result['test_passed'] = values["value"].length() <= 32
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributePartNumberWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000013_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = err.code == CHIPErrorCodeUnsupportedAttribute
            result['test_passed'] = values["value"].length() <= 256
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeProductURLWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000014_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = err.code == CHIPErrorCodeUnsupportedAttribute
            result['test_passed'] = values["value"].length() <= 64
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeProductLabelWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000015_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = err.code == CHIPErrorCodeUnsupportedAttribute
            result['test_passed'] = values["value"].length() <= 32
            result['error_str'] = "Expected value  is not greater than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeSerialNumberWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000016_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = err.code == CHIPErrorCodeUnsupportedAttribute
            GLOBAL_EVENT.set()


        cluster.readAttributeLocalConfigDisabledWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_DM_1_1_000017_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBasic")

        def response_callback(error, values):
            result['test_passed'] = err.code == CHIPErrorCodeUnsupportedAttribute
            GLOBAL_EVENT.set()


        cluster.readAttributeReachableWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        


    def testSendClusterTest_TC_CC_3_4_000000_On(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.on_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000002_MoveToHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        hueArgument = 150
        directionArgument = 0
        transitionTimeArgument = 100
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveToHue_direction_transitionTime_optionsMask_optionsOverride_responseHandler_(hueArgument, directionArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000003_MoveToHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        hueArgument = 200
        directionArgument = 1
        transitionTimeArgument = 100
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveToHue_direction_transitionTime_optionsMask_optionsOverride_responseHandler_(hueArgument, directionArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000004_MoveToHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        hueArgument = 250
        directionArgument = 2
        transitionTimeArgument = 100
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveToHue_direction_transitionTime_optionsMask_optionsOverride_responseHandler_(hueArgument, directionArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000005_MoveToHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        hueArgument = 225
        directionArgument = 3
        transitionTimeArgument = 100
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveToHue_direction_transitionTime_optionsMask_optionsOverride_responseHandler_(hueArgument, directionArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000006_MoveHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 1
        rateArgument = 50
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveHue_rate_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000007_MoveHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 0
        rateArgument = 50
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveHue_rate_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000008_MoveHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 3
        rateArgument = 50
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveHue_rate_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000009_MoveHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 0
        rateArgument = 50
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveHue_rate_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000010_StepHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        stepModeArgument = 1
        stepSizeArgument = 5
        transitionTimeArgument = 25
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.stepHue_stepSize_transitionTime_optionsMask_optionsOverride_responseHandler_(stepModeArgument, stepSizeArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000011_StepHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        stepModeArgument = 3
        stepSizeArgument = 5
        transitionTimeArgument = 25
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.stepHue_stepSize_transitionTime_optionsMask_optionsOverride_responseHandler_(stepModeArgument, stepSizeArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000012_MoveToSaturation(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        saturationArgument = 90
        transitionTimeArgument = 10
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveToSaturation_transitionTime_optionsMask_optionsOverride_responseHandler_(saturationArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000013_MoveSaturation(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 1
        rateArgument = 5
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveSaturation_rate_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000014_MoveSaturation(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 3
        rateArgument = 5
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveSaturation_rate_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000015_StepSaturation(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        stepModeArgument = 1
        stepSizeArgument = 15
        transitionTimeArgument = 10
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.stepSaturation_stepSize_transitionTime_optionsMask_optionsOverride_responseHandler_(stepModeArgument, stepSizeArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000016_StepSaturation(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        stepModeArgument = 3
        stepSizeArgument = 20
        transitionTimeArgument = 10
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.stepSaturation_stepSize_transitionTime_optionsMask_optionsOverride_responseHandler_(stepModeArgument, stepSizeArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000017_MoveToHueAndSaturation(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        hueArgument = 40
        saturationArgument = 160
        transitionTimeArgument = 10
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveToHueAndSaturation_saturation_transitionTime_optionsMask_optionsOverride_responseHandler_(hueArgument, saturationArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000018_Off(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.off_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_3_4_000019_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_CC_5_000000_On(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.on_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_5_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_5_000002_MoveToColor(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        colorXArgument = 200
        colorYArgument = 300
        transitionTimeArgument = 20
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveToColor_colorY_transitionTime_optionsMask_optionsOverride_responseHandler_(colorXArgument, colorYArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_5_000003_MoveColor(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        rateXArgument = 15
        rateYArgument = 20
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveColor_rateY_optionsMask_optionsOverride_responseHandler_(rateXArgument, rateYArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_5_000004_StopMoveStep(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.stopMoveStep_optionsOverride_responseHandler_(optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_5_000005_StepColor(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        stepXArgument = 15
        stepYArgument = 20
        transitionTimeArgument = 50
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.stepColor_stepY_transitionTime_optionsMask_optionsOverride_responseHandler_(stepXArgument, stepYArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_5_000006_Off(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.off_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_5_000007_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_CC_6_000000_On(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.on_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_6_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_6_000002_MoveToColorTemperature(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        colorTemperatureArgument = 100
        transitionTimeArgument = 10
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveToColorTemperature_transitionTime_optionsMask_optionsOverride_responseHandler_(colorTemperatureArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_6_000003_MoveColorTemperature(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 1
        rateArgument = 10
        colorTemperatureMinimumArgument = 1
        colorTemperatureMaximumArgument = 255
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveColorTemperature_rate_colorTemperatureMinimum_colorTemperatureMaximum_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, colorTemperatureMinimumArgument, colorTemperatureMaximumArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_6_000004_MoveColorTemperature(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 0
        rateArgument = 10
        colorTemperatureMinimumArgument = 1
        colorTemperatureMaximumArgument = 255
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveColorTemperature_rate_colorTemperatureMinimum_colorTemperatureMaximum_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, colorTemperatureMinimumArgument, colorTemperatureMaximumArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_6_000005_MoveColorTemperature(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 3
        rateArgument = 20
        colorTemperatureMinimumArgument = 1
        colorTemperatureMaximumArgument = 255
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.moveColorTemperature_rate_colorTemperatureMinimum_colorTemperatureMaximum_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, colorTemperatureMinimumArgument, colorTemperatureMaximumArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_6_000006_StepColorTemperature(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        stepModeArgument = 1
        stepSizeArgument = 5
        transitionTimeArgument = 50
        colorTemperatureMinimumArgument = 5
        colorTemperatureMaximumArgument = 100
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.stepColorTemperature_stepSize_transitionTime_colorTemperatureMinimum_colorTemperatureMaximum_optionsMask_optionsOverride_responseHandler_(stepModeArgument, stepSizeArgument, transitionTimeArgument, colorTemperatureMinimumArgument, colorTemperatureMaximumArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_6_000007_StepColorTemperature(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        stepModeArgument = 3
        stepSizeArgument = 5
        transitionTimeArgument = 50
        colorTemperatureMinimumArgument = 5
        colorTemperatureMaximumArgument = 100
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.stepColorTemperature_stepSize_transitionTime_colorTemperatureMinimum_colorTemperatureMaximum_optionsMask_optionsOverride_responseHandler_(stepModeArgument, stepSizeArgument, transitionTimeArgument, colorTemperatureMinimumArgument, colorTemperatureMaximumArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_6_000008_Off(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.off_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_6_000009_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_CC_7_000000_On(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.on_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000002_EnhancedMoveToHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        enhancedHueArgument = 1025
        directionArgument = 0
        transitionTimeArgument = 1
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.enhancedMoveToHue_direction_transitionTime_optionsMask_optionsOverride_responseHandler_(enhancedHueArgument, directionArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000003_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeRemainingTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000004_EnhancedMoveHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 3
        rateArgument = 5
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.enhancedMoveHue_rate_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000005_EnhancedMoveHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 0
        rateArgument = 0
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.enhancedMoveHue_rate_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000006_EnhancedMoveHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 1
        rateArgument = 50
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.enhancedMoveHue_rate_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000007_EnhancedMoveHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        moveModeArgument = 0
        rateArgument = 0
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.enhancedMoveHue_rate_optionsMask_optionsOverride_responseHandler_(moveModeArgument, rateArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000008_EnhancedStepHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        stepModeArgument = 0
        stepSizeArgument = 50
        transitionTimeArgument = 1
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.enhancedStepHue_stepSize_transitionTime_optionsMask_optionsOverride_responseHandler_(stepModeArgument, stepSizeArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000009_EnhancedStepHue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        stepModeArgument = 1
        stepSizeArgument = 75
        transitionTimeArgument = 1
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.enhancedStepHue_stepSize_transitionTime_optionsMask_optionsOverride_responseHandler_(stepModeArgument, stepSizeArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000010_EnhancedMoveToHueAndSaturation(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        enhancedHueArgument = 1200
        saturationArgument = 90
        transitionTimeArgument = 10
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.enhancedMoveToHueAndSaturation_saturation_transitionTime_optionsMask_optionsOverride_responseHandler_(enhancedHueArgument, saturationArgument, transitionTimeArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000011_Off(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.off_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_7_000012_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_CC_8_000000_On(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.on_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000002_ColorLoopSet(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        updateFlagsArgument = 14
        actionArgument = 0
        directionArgument = 1
        timeArgument = 100
        startHueArgument = 500
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.colorLoopSet_action_direction_time_startHue_optionsMask_optionsOverride_responseHandler_(updateFlagsArgument, actionArgument, directionArgument, timeArgument, startHueArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000003_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopDirectionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000004_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 100
            result['error_str'] = "Expected value 100 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000005_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 500
            result['error_str'] = "Expected value 500 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopStartEnhancedHueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000006_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopActiveWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000007_ColorLoopSet(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        updateFlagsArgument = 1
        actionArgument = 1
        directionArgument = 0
        timeArgument = 0
        startHueArgument = 0
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.colorLoopSet_action_direction_time_startHue_optionsMask_optionsOverride_responseHandler_(updateFlagsArgument, actionArgument, directionArgument, timeArgument, startHueArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000008_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopActiveWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000009_ColorLoopSet(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        updateFlagsArgument = 6
        actionArgument = 0
        directionArgument = 0
        timeArgument = 3500
        startHueArgument = 0
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.colorLoopSet_action_direction_time_startHue_optionsMask_optionsOverride_responseHandler_(updateFlagsArgument, actionArgument, directionArgument, timeArgument, startHueArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000010_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopDirectionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000011_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 3500
            result['error_str'] = "Expected value 3500 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000012_ColorLoopSet(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        updateFlagsArgument = 2
        actionArgument = 0
        directionArgument = 1
        timeArgument = 0
        startHueArgument = 0
        optionsMaskArgument = 0
        optionsOverrideArgument = 0

        cluster.colorLoopSet_action_direction_time_startHue_optionsMask_optionsOverride_responseHandler_(updateFlagsArgument, actionArgument, directionArgument, timeArgument, startHueArgument, optionsMaskArgument, optionsOverrideArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000013_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopDirectionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000014_Off(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()


        cluster.off_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_CC_8_000015_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_WNCV_1_1_000000_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 3
            result['error_str'] = "Expected value 3 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_1_1_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 3
            result['error_str'] = "Expected value 3 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_WNCV_2_1_000000_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_2_1_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_2_1_000002_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 3
            result['error_str'] = "Expected value 3 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeConfigStatusWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_2_1_000003_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 3
            result['error_str'] = "Expected value 3 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeConfigStatusWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_2_1_000004_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOperationalStatusWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_2_1_000005_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeOperationalStatusWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_2_1_000006_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeEndProductTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_2_1_000007_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeEndProductTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_2_1_000008_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 0
            result['error_str'] = "Expected value 0 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeModeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_2_1_000009_WriteAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            GLOBAL_EVENT.set()

        modeArgument = 7

        cluster.writeAttributeModeWithValue_responseHandler_(modeArgument, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_WNCV_2_1_000010_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 7
            result['error_str'] = "Expected value 7 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeModeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_BI_1_1_000000_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBinaryInputBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBinaryInputBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_BI_1_1_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBinaryInputBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBinaryInputBasic")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 1
            result['error_str'] = "Expected value 1 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        


    def testSendClusterTest_TC_TM_1_1_000000_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTemperatureMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTemperatureMeasurement")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 3
            result['error_str'] = "Expected value 3 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_TM_1_1_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTemperatureMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTemperatureMeasurement")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 3
            result['error_str'] = "Expected value 3 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterTest_TC_OCC_1_1_000000_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOccupancySensing.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOccupancySensing")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 2
            result['error_str'] = "Expected value 2 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterTest_TC_OCC_1_1_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOccupancySensing.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOccupancySensing")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] == 2
            result['error_str'] = "Expected value 2 does not match actual value {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        

    def testSendClusterOperationalCredentialsCluster_000000_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOperationalCredentials.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOperationalCredentials")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] >= 4
            result['error_str'] = "Expected value  is not less than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeSupportedFabricsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        
    def testSendClusterOperationalCredentialsCluster_000001_ReadAttribute(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOperationalCredentials.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOperationalCredentials")

        def response_callback(error, values):
            result['test_passed'] = (error.code  if error else 0) == 0
            result['error_str'] = "Received error in test cluster"
            result['test_passed'] = values["value"] >= 1
            result['error_str'] = "Expected value  is not less than or equal to {}".format(values["value"] )
            GLOBAL_EVENT.set()


        cluster.readAttributeCommissionedFabricsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException(result['error_str'])
        


    def testSendClusterAccountLoginReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPAccountLogin.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPAccountLogin")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterAdministratorCommissioningReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPAdministratorCommissioning.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPAdministratorCommissioning")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationBasicReadAttributeVendorNameWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeVendorNameWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationBasicReadAttributeVendorIdWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeVendorIdWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationBasicReadAttributeApplicationNameWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeApplicationNameWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationBasicReadAttributeProductIdWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeProductIdWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationBasicReadAttributeApplicationIdWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeApplicationIdWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationBasicReadAttributeCatalogVendorIdWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCatalogVendorIdWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationBasicReadAttributeApplicationStatusWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeApplicationStatusWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationBasicReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationLauncherReadAttributeApplicationLauncherListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationLauncher.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationLauncher")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeApplicationLauncherListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationLauncherReadAttributeCatalogVendorIdWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationLauncher.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationLauncher")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCatalogVendorIdWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationLauncherReadAttributeApplicationIdWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationLauncher.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationLauncher")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeApplicationIdWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterApplicationLauncherReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPApplicationLauncher.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPApplicationLauncher")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterAudioOutputReadAttributeAudioOutputListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPAudioOutput.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPAudioOutput")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeAudioOutputListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterAudioOutputReadAttributeCurrentAudioOutputWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPAudioOutput.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPAudioOutput")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentAudioOutputWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterAudioOutputReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPAudioOutput.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPAudioOutput")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBarrierControlReadAttributeBarrierMovingStateWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBarrierControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBarrierControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeBarrierMovingStateWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBarrierControlReadAttributeBarrierSafetyStatusWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBarrierControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBarrierControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeBarrierSafetyStatusWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBarrierControlReadAttributeBarrierCapabilitiesWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBarrierControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBarrierControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeBarrierCapabilitiesWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBarrierControlReadAttributeBarrierPositionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBarrierControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBarrierControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeBarrierPositionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBarrierControlReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBarrierControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBarrierControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBinaryInputBasicReadAttributeOutOfServiceWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBinaryInputBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBinaryInputBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOutOfServiceWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBinaryInputBasicWriteAttributeOutOfServiceWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBinaryInputBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBinaryInputBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeOutOfServiceWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterBinaryInputBasicReadAttributePresentValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBinaryInputBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBinaryInputBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePresentValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBinaryInputBasicWriteAttributePresentValueWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBinaryInputBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBinaryInputBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0
        cluster.writeAttributePresentValueWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterBinaryInputBasicReadAttributeStatusFlagsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBinaryInputBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBinaryInputBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeStatusFlagsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBinaryInputBasicReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBinaryInputBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBinaryInputBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBindingReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBinding.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBinding")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeVendorNameWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeVendorNameWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeVendorIDWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeVendorIDWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeProductNameWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeProductNameWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeUserLabelWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeUserLabelWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicWriteAttributeUserLabelWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = "Test"
        cluster.writeAttributeUserLabelWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterBridgedDeviceBasicReadAttributeHardwareVersionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeHardwareVersionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeHardwareVersionStringWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeHardwareVersionStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeSoftwareVersionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSoftwareVersionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeSoftwareVersionStringWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSoftwareVersionStringWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeManufacturingDateWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeManufacturingDateWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributePartNumberWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePartNumberWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeProductURLWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeProductURLWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeProductLabelWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeProductLabelWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeSerialNumberWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSerialNumberWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeReachableWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeReachableWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterBridgedDeviceBasicReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPBridgedDeviceBasic.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPBridgedDeviceBasic")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeCurrentHueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentHueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeCurrentSaturationWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentSaturationWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeRemainingTimeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRemainingTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeCurrentXWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentXWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeCurrentYWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentYWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeDriftCompensationWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeDriftCompensationWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeCompensationTextWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCompensationTextWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorTemperatureWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorTemperatureWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorModeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorModeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorControlOptionsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorControlOptionsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeColorControlOptionsWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeColorControlOptionsWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeNumberOfPrimariesWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeNumberOfPrimariesWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary1XWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary1XWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary1YWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary1YWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary1IntensityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary1IntensityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary2XWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary2XWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary2YWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary2YWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary2IntensityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary2IntensityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary3XWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary3XWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary3YWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary3YWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary3IntensityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary3IntensityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary4XWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary4XWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary4YWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary4YWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary4IntensityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary4IntensityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary5XWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary5XWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary5YWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary5YWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary5IntensityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary5IntensityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary6XWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary6XWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary6YWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary6YWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributePrimary6IntensityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePrimary6IntensityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeWhitePointXWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeWhitePointXWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeWhitePointXWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000
        cluster.writeAttributeWhitePointXWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeWhitePointYWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeWhitePointYWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeWhitePointYWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000
        cluster.writeAttributeWhitePointYWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeColorPointRXWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorPointRXWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeColorPointRXWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000
        cluster.writeAttributeColorPointRXWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeColorPointRYWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorPointRYWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeColorPointRYWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000
        cluster.writeAttributeColorPointRYWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeColorPointRIntensityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorPointRIntensityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeColorPointRIntensityWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeColorPointRIntensityWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeColorPointGXWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorPointGXWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeColorPointGXWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000
        cluster.writeAttributeColorPointGXWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeColorPointGYWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorPointGYWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeColorPointGYWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000
        cluster.writeAttributeColorPointGYWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeColorPointGIntensityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorPointGIntensityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeColorPointGIntensityWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeColorPointGIntensityWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeColorPointBXWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorPointBXWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeColorPointBXWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000
        cluster.writeAttributeColorPointBXWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeColorPointBYWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorPointBYWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeColorPointBYWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000
        cluster.writeAttributeColorPointBYWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeColorPointBIntensityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorPointBIntensityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeColorPointBIntensityWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeColorPointBIntensityWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeEnhancedCurrentHueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeEnhancedCurrentHueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeEnhancedColorModeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeEnhancedColorModeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorLoopActiveWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopActiveWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorLoopDirectionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopDirectionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorLoopTimeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorLoopStartEnhancedHueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopStartEnhancedHueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorLoopStoredEnhancedHueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorLoopStoredEnhancedHueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorCapabilitiesWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorCapabilitiesWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorTempPhysicalMinWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorTempPhysicalMinWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeColorTempPhysicalMaxWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeColorTempPhysicalMaxWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeCoupleColorTempToLevelMinMiredsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCoupleColorTempToLevelMinMiredsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlReadAttributeStartUpColorTemperatureMiredsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeStartUpColorTemperatureMiredsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterColorControlWriteAttributeStartUpColorTemperatureMiredsWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000
        cluster.writeAttributeStartUpColorTemperatureMiredsWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterColorControlReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPColorControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPColorControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterContentLauncherReadAttributeAcceptsHeaderListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPContentLauncher.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPContentLauncher")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeAcceptsHeaderListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterContentLauncherReadAttributeSupportedStreamingTypesWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPContentLauncher.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPContentLauncher")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSupportedStreamingTypesWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterContentLauncherReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPContentLauncher.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPContentLauncher")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterDescriptorReadAttributeDeviceListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPDescriptor.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPDescriptor")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeDeviceListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterDescriptorReadAttributeServerListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPDescriptor.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPDescriptor")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeServerListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterDescriptorReadAttributeClientListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPDescriptor.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPDescriptor")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClientListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterDescriptorReadAttributePartsListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPDescriptor.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPDescriptor")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePartsListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterDescriptorReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPDescriptor.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPDescriptor")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterDoorLockReadAttributeLockStateWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPDoorLock.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPDoorLock")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeLockStateWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterDoorLockReadAttributeLockTypeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPDoorLock.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPDoorLock")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeLockTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterDoorLockReadAttributeActuatorEnabledWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPDoorLock.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPDoorLock")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeActuatorEnabledWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterDoorLockReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPDoorLock.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPDoorLock")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeMeasurementTypeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMeasurementTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeTotalActivePowerWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTotalActivePowerWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeRmsVoltageWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRmsVoltageWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeRmsVoltageMinWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRmsVoltageMinWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeRmsVoltageMaxWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRmsVoltageMaxWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeRmsCurrentWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRmsCurrentWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeRmsCurrentMinWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRmsCurrentMinWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeRmsCurrentMaxWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRmsCurrentMaxWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeActivePowerWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeActivePowerWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeActivePowerMinWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeActivePowerMinWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeActivePowerMaxWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeActivePowerMaxWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterElectricalMeasurementReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPElectricalMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPElectricalMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterEthernetNetworkDiagnosticsReadAttributePacketRxCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPEthernetNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPEthernetNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePacketRxCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterEthernetNetworkDiagnosticsReadAttributePacketTxCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPEthernetNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPEthernetNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePacketTxCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterEthernetNetworkDiagnosticsReadAttributeTxErrCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPEthernetNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPEthernetNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxErrCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterEthernetNetworkDiagnosticsReadAttributeCollisionCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPEthernetNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPEthernetNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCollisionCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterEthernetNetworkDiagnosticsReadAttributeOverrunCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPEthernetNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPEthernetNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOverrunCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterEthernetNetworkDiagnosticsReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPEthernetNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPEthernetNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterFixedLabelReadAttributeLabelListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPFixedLabel.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPFixedLabel")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeLabelListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterFixedLabelReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPFixedLabel.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPFixedLabel")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterFlowMeasurementReadAttributeMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPFlowMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPFlowMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterFlowMeasurementReadAttributeMinMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPFlowMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPFlowMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMinMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterFlowMeasurementReadAttributeMaxMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPFlowMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPFlowMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMaxMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterFlowMeasurementReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPFlowMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPFlowMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGeneralCommissioningReadAttributeBreadcrumbWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGeneralCommissioning.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGeneralCommissioning")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeBreadcrumbWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGeneralCommissioningWriteAttributeBreadcrumbWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGeneralCommissioning.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGeneralCommissioning")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000000000000000
        cluster.writeAttributeBreadcrumbWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterGeneralCommissioningReadAttributeBasicCommissioningInfoListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGeneralCommissioning.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGeneralCommissioning")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeBasicCommissioningInfoListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGeneralCommissioningReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGeneralCommissioning.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGeneralCommissioning")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGeneralDiagnosticsReadAttributeNetworkInterfacesWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGeneralDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGeneralDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeNetworkInterfacesWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGeneralDiagnosticsReadAttributeRebootCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGeneralDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGeneralDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRebootCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGeneralDiagnosticsReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGeneralDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGeneralDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGroupKeyManagementReadAttributeGroupsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGroupKeyManagement.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGroupKeyManagement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeGroupsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGroupKeyManagementReadAttributeGroupKeysWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGroupKeyManagement.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGroupKeyManagement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeGroupKeysWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGroupKeyManagementReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGroupKeyManagement.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGroupKeyManagement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGroupsReadAttributeNameSupportWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGroups.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGroups")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeNameSupportWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterGroupsReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPGroups.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPGroups")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterIdentifyReadAttributeIdentifyTimeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPIdentify.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPIdentify")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeIdentifyTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterIdentifyWriteAttributeIdentifyTimeWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPIdentify.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPIdentify")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x0000
        cluster.writeAttributeIdentifyTimeWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterIdentifyReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPIdentify.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPIdentify")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterKeypadInputReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPKeypadInput.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPKeypadInput")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterLevelControlReadAttributeCurrentLevelWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPLevelControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPLevelControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentLevelWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterLevelControlReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPLevelControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPLevelControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterLowPowerReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPLowPower.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPLowPower")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterMediaInputReadAttributeMediaInputListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPMediaInput.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPMediaInput")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMediaInputListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterMediaInputReadAttributeCurrentMediaInputWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPMediaInput.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPMediaInput")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentMediaInputWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterMediaInputReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPMediaInput.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPMediaInput")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterMediaPlaybackReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPMediaPlayback.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPMediaPlayback")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterNetworkCommissioningReadAttributeFeatureMapWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPNetworkCommissioning.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPNetworkCommissioning")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeFeatureMapWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterNetworkCommissioningReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPNetworkCommissioning.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPNetworkCommissioning")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOtaSoftwareUpdateProviderReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOtaSoftwareUpdateProvider.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOtaSoftwareUpdateProvider")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOccupancySensingReadAttributeOccupancyWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOccupancySensing.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOccupancySensing")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOccupancyWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOccupancySensingReadAttributeOccupancySensorTypeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOccupancySensing.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOccupancySensing")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOccupancySensorTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOccupancySensingReadAttributeOccupancySensorTypeBitmapWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOccupancySensing.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOccupancySensing")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOccupancySensorTypeBitmapWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOccupancySensingReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOccupancySensing.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOccupancySensing")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOnOffReadAttributeOnOffWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOnOffReadAttributeGlobalSceneControlWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeGlobalSceneControlWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOnOffReadAttributeOnTimeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOnTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOnOffWriteAttributeOnTimeWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0
        cluster.writeAttributeOnTimeWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterOnOffReadAttributeOffWaitTimeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOffWaitTimeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOnOffWriteAttributeOffWaitTimeWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0
        cluster.writeAttributeOffWaitTimeWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterOnOffReadAttributeStartUpOnOffWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeStartUpOnOffWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOnOffWriteAttributeStartUpOnOffWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0
        cluster.writeAttributeStartUpOnOffWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterOnOffReadAttributeFeatureMapWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeFeatureMapWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOnOffReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOff.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOff")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOnOffSwitchConfigurationReadAttributeSwitchTypeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOffSwitchConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOffSwitchConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSwitchTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOnOffSwitchConfigurationReadAttributeSwitchActionsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOffSwitchConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOffSwitchConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSwitchActionsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOnOffSwitchConfigurationWriteAttributeSwitchActionsWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOffSwitchConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOffSwitchConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeSwitchActionsWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterOnOffSwitchConfigurationReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOnOffSwitchConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOnOffSwitchConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOperationalCredentialsReadAttributeFabricsListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOperationalCredentials.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOperationalCredentials")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeFabricsListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOperationalCredentialsReadAttributeSupportedFabricsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOperationalCredentials.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOperationalCredentials")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSupportedFabricsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOperationalCredentialsReadAttributeCommissionedFabricsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOperationalCredentials.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOperationalCredentials")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCommissionedFabricsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterOperationalCredentialsReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPOperationalCredentials.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPOperationalCredentials")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPressureMeasurementReadAttributeMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPressureMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPressureMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPressureMeasurementReadAttributeMinMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPressureMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPressureMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMinMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPressureMeasurementReadAttributeMaxMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPressureMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPressureMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMaxMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPressureMeasurementReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPressureMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPressureMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPumpConfigurationAndControlReadAttributeMaxPressureWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPumpConfigurationAndControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPumpConfigurationAndControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMaxPressureWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPumpConfigurationAndControlReadAttributeMaxSpeedWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPumpConfigurationAndControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPumpConfigurationAndControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMaxSpeedWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPumpConfigurationAndControlReadAttributeMaxFlowWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPumpConfigurationAndControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPumpConfigurationAndControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMaxFlowWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPumpConfigurationAndControlReadAttributeEffectiveOperationModeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPumpConfigurationAndControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPumpConfigurationAndControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeEffectiveOperationModeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPumpConfigurationAndControlReadAttributeEffectiveControlModeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPumpConfigurationAndControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPumpConfigurationAndControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeEffectiveControlModeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPumpConfigurationAndControlReadAttributeCapacityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPumpConfigurationAndControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPumpConfigurationAndControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCapacityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPumpConfigurationAndControlReadAttributeOperationModeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPumpConfigurationAndControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPumpConfigurationAndControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOperationModeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterPumpConfigurationAndControlWriteAttributeOperationModeWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPumpConfigurationAndControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPumpConfigurationAndControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeOperationModeWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterPumpConfigurationAndControlReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPPumpConfigurationAndControl.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPPumpConfigurationAndControl")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterRelativeHumidityMeasurementReadAttributeMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPRelativeHumidityMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPRelativeHumidityMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterRelativeHumidityMeasurementReadAttributeMinMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPRelativeHumidityMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPRelativeHumidityMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMinMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterRelativeHumidityMeasurementReadAttributeMaxMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPRelativeHumidityMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPRelativeHumidityMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMaxMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterRelativeHumidityMeasurementReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPRelativeHumidityMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPRelativeHumidityMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterScenesReadAttributeSceneCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPScenes.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPScenes")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSceneCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterScenesReadAttributeCurrentSceneWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPScenes.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPScenes")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentSceneWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterScenesReadAttributeCurrentGroupWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPScenes.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPScenes")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentGroupWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterScenesReadAttributeSceneValidWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPScenes.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPScenes")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSceneValidWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterScenesReadAttributeNameSupportWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPScenes.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPScenes")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeNameSupportWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterScenesReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPScenes.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPScenes")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterSoftwareDiagnosticsReadAttributeCurrentHeapHighWatermarkWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPSoftwareDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPSoftwareDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentHeapHighWatermarkWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterSoftwareDiagnosticsReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPSoftwareDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPSoftwareDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterSwitchReadAttributeNumberOfPositionsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPSwitch.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPSwitch")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeNumberOfPositionsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterSwitchReadAttributeCurrentPositionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPSwitch.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPSwitch")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentPositionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterSwitchReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPSwitch.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPSwitch")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTvChannelReadAttributeTvChannelListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTvChannel.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTvChannel")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTvChannelListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTvChannelReadAttributeTvChannelLineupWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTvChannel.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTvChannel")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTvChannelLineupWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTvChannelReadAttributeCurrentTvChannelWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTvChannel.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTvChannel")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentTvChannelWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTvChannelReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTvChannel.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTvChannel")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTargetNavigatorReadAttributeTargetNavigatorListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTargetNavigator.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTargetNavigator")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTargetNavigatorListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTargetNavigatorReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTargetNavigator.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTargetNavigator")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTemperatureMeasurementReadAttributeMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTemperatureMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTemperatureMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTemperatureMeasurementReadAttributeMinMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTemperatureMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTemperatureMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMinMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTemperatureMeasurementReadAttributeMaxMeasuredValueWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTemperatureMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTemperatureMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMaxMeasuredValueWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterTemperatureMeasurementReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPTemperatureMeasurement.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPTemperatureMeasurement")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatReadAttributeLocalTemperatureWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeLocalTemperatureWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatReadAttributeAbsMinHeatSetpointLimitWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeAbsMinHeatSetpointLimitWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatReadAttributeAbsMaxHeatSetpointLimitWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeAbsMaxHeatSetpointLimitWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatReadAttributeAbsMinCoolSetpointLimitWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeAbsMinCoolSetpointLimitWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatReadAttributeAbsMaxCoolSetpointLimitWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeAbsMaxCoolSetpointLimitWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatReadAttributeOccupiedCoolingSetpointWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOccupiedCoolingSetpointWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatWriteAttributeOccupiedCoolingSetpointWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0
        cluster.writeAttributeOccupiedCoolingSetpointWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatReadAttributeOccupiedHeatingSetpointWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOccupiedHeatingSetpointWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatWriteAttributeOccupiedHeatingSetpointWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0
        cluster.writeAttributeOccupiedHeatingSetpointWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatReadAttributeMinHeatSetpointLimitWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMinHeatSetpointLimitWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatWriteAttributeMinHeatSetpointLimitWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x954D
        cluster.writeAttributeMinHeatSetpointLimitWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatReadAttributeMaxHeatSetpointLimitWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMaxHeatSetpointLimitWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatWriteAttributeMaxHeatSetpointLimitWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x954D
        cluster.writeAttributeMaxHeatSetpointLimitWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatReadAttributeMinCoolSetpointLimitWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMinCoolSetpointLimitWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatWriteAttributeMinCoolSetpointLimitWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x954D
        cluster.writeAttributeMinCoolSetpointLimitWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatReadAttributeMaxCoolSetpointLimitWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMaxCoolSetpointLimitWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatWriteAttributeMaxCoolSetpointLimitWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x954D
        cluster.writeAttributeMaxCoolSetpointLimitWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatReadAttributeControlSequenceOfOperationWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeControlSequenceOfOperationWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatWriteAttributeControlSequenceOfOperationWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeControlSequenceOfOperationWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatReadAttributeSystemModeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSystemModeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatWriteAttributeSystemModeWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeSystemModeWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatReadAttributeStartOfWeekWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeStartOfWeekWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatReadAttributeNumberOfWeeklyTransitionsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeNumberOfWeeklyTransitionsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatReadAttributeNumberOfDailyTransitionsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeNumberOfDailyTransitionsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatReadAttributeFeatureMapWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeFeatureMapWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostat.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostat")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatUserInterfaceConfigurationReadAttributeTemperatureDisplayModeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostatUserInterfaceConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostatUserInterfaceConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTemperatureDisplayModeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatUserInterfaceConfigurationWriteAttributeTemperatureDisplayModeWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostatUserInterfaceConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostatUserInterfaceConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeTemperatureDisplayModeWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatUserInterfaceConfigurationReadAttributeKeypadLockoutWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostatUserInterfaceConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostatUserInterfaceConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeKeypadLockoutWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatUserInterfaceConfigurationWriteAttributeKeypadLockoutWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostatUserInterfaceConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostatUserInterfaceConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeKeypadLockoutWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatUserInterfaceConfigurationReadAttributeScheduleProgrammingVisibilityWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostatUserInterfaceConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostatUserInterfaceConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeScheduleProgrammingVisibilityWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThermostatUserInterfaceConfigurationWriteAttributeScheduleProgrammingVisibilityWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostatUserInterfaceConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostatUserInterfaceConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeScheduleProgrammingVisibilityWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterThermostatUserInterfaceConfigurationReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThermostatUserInterfaceConfiguration.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThermostatUserInterfaceConfiguration")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeChannelWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeChannelWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRoutingRoleWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRoutingRoleWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeNetworkNameWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeNetworkNameWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributePanIdWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePanIdWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeExtendedPanIdWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeExtendedPanIdWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeMeshLocalPrefixWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeMeshLocalPrefixWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeOverrunCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOverrunCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeNeighborTableListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeNeighborTableListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRouteTableListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRouteTableListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributePartitionIdWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePartitionIdWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeWeightingWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeWeightingWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeDataVersionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeDataVersionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeStableDataVersionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeStableDataVersionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeLeaderRouterIdWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeLeaderRouterIdWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeDetachedRoleCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeDetachedRoleCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeChildRoleCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeChildRoleCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRouterRoleCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRouterRoleCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeLeaderRoleCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeLeaderRoleCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeAttachAttemptCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeAttachAttemptCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributePartitionIdChangeCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributePartitionIdChangeCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeBetterPartitionAttachAttemptCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeBetterPartitionAttachAttemptCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeParentChangeCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeParentChangeCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxTotalCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxTotalCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxUnicastCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxUnicastCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxBroadcastCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxBroadcastCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxAckRequestedCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxAckRequestedCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxAckedCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxAckedCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxNoAckRequestedCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxNoAckRequestedCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxDataCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxDataCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxDataPollCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxDataPollCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxBeaconCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxBeaconCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxBeaconRequestCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxBeaconRequestCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxOtherCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxOtherCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxRetryCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxRetryCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxDirectMaxRetryExpiryCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxDirectMaxRetryExpiryCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxIndirectMaxRetryExpiryCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxIndirectMaxRetryExpiryCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxErrCcaCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxErrCcaCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxErrAbortCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxErrAbortCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeTxErrBusyChannelCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTxErrBusyChannelCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxTotalCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxTotalCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxUnicastCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxUnicastCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxBroadcastCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxBroadcastCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxDataCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxDataCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxDataPollCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxDataPollCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxBeaconCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxBeaconCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxBeaconRequestCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxBeaconRequestCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxOtherCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxOtherCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxAddressFilteredCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxAddressFilteredCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxDestAddrFilteredCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxDestAddrFilteredCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxDuplicatedCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxDuplicatedCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrNoFrameCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxErrNoFrameCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrUnknownNeighborCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxErrUnknownNeighborCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrInvalidSrcAddrCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxErrInvalidSrcAddrCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrSecCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxErrSecCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrFcsCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxErrFcsCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrOtherCountWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRxErrOtherCountWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeSecurityPolicyWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSecurityPolicyWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeChannelMaskWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeChannelMaskWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeOperationalDatasetComponentsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOperationalDatasetComponentsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeActiveNetworkFaultsListWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeActiveNetworkFaultsListWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterThreadNetworkDiagnosticsReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPThreadNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPThreadNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWakeOnLanReadAttributeWakeOnLanMacAddressWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWakeOnLan.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWakeOnLan")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeWakeOnLanMacAddressWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWakeOnLanReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWakeOnLan.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWakeOnLan")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWiFiNetworkDiagnosticsReadAttributeBssidWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWiFiNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWiFiNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeBssidWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWiFiNetworkDiagnosticsReadAttributeSecurityTypeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWiFiNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWiFiNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSecurityTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWiFiNetworkDiagnosticsReadAttributeWiFiVersionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWiFiNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWiFiNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeWiFiVersionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWiFiNetworkDiagnosticsReadAttributeChannelNumberWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWiFiNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWiFiNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeChannelNumberWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWiFiNetworkDiagnosticsReadAttributeRssiWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWiFiNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWiFiNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeRssiWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWiFiNetworkDiagnosticsReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWiFiNetworkDiagnostics.alloc().initWithDevice_endpoint_queue_(device, 0, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWiFiNetworkDiagnostics")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeTypeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeCurrentPositionLiftWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentPositionLiftWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeCurrentPositionTiltWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentPositionTiltWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeConfigStatusWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeConfigStatusWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeCurrentPositionLiftPercentageWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentPositionLiftPercentageWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeCurrentPositionTiltPercentageWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentPositionTiltPercentageWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeOperationalStatusWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeOperationalStatusWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeTargetPositionLiftPercent100thsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTargetPositionLiftPercent100thsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeTargetPositionTiltPercent100thsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeTargetPositionTiltPercent100thsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeEndProductTypeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeEndProductTypeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeCurrentPositionLiftPercent100thsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentPositionLiftPercent100thsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeCurrentPositionTiltPercent100thsWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeCurrentPositionTiltPercent100thsWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeInstalledOpenLimitLiftWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeInstalledOpenLimitLiftWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeInstalledClosedLimitLiftWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeInstalledClosedLimitLiftWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeInstalledOpenLimitTiltWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeInstalledOpenLimitTiltWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeInstalledClosedLimitTiltWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeInstalledClosedLimitTiltWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeModeWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeModeWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringWriteAttributeModeWithValue(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()

        value = 0x00
        cluster.writeAttributeModeWithValue_responseHandler_(value, response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")
    def testSendClusterWindowCoveringReadAttributeSafetyStatusWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeSafetyStatusWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

    def testSendClusterWindowCoveringReadAttributeClusterRevisionWithResponseHandler(self):
        result = {"test_passed": False, "error_str": ""}
        device = GetPairedDevice(kDeviceId)
        test_dispatch_q = dispatch_queue_create("com.chip.pairing")
        call_back_q = objc.objc_object(c_void_p=test_dispatch_q)

        cluster = PyChip.CHIPWindowCovering.alloc().initWithDevice_endpoint_queue_(device, 1, call_back_q)
        if not cluster:
            raise TestException("Unable to create CHIPWindowCovering")

        def response_callback(error, value):
            result['test_passed'] = (error.code if error else 0) == 0
            GLOBAL_EVENT.set()


        cluster.readAttributeClusterRevisionWithResponseHandler_(response_callback)
        waitForEvent()
        if not result['test_passed']:
            raise TestException("Received error in test cluster")

